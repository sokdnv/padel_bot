import asyncio
import logging
from datetime import datetime, timedelta, timezone

logger = logging.getLogger(__name__)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å GMT+3
MOSCOW_TZ = timezone(timedelta(hours=3))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot_instance = None
db_instance = None
reminder_tasks = {}


async def schedule_reminder(game_date, game_time):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã"""
    if not game_time:
        return  # –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ - –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

    try:
        # game_date —ç—Ç–æ date –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î
        # game_time —ç—Ç–æ time –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î

        # –°–æ–∑–¥–∞–µ–º datetime –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ GMT+3
        if isinstance(game_time, str):
            time_obj = datetime.strptime(game_time, "%H:%M:%S").time()
        else:
            time_obj = game_time

        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å GMT+3
        game_datetime = datetime.combine(game_date, time_obj, tzinfo=MOSCOW_TZ)

        # –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –∑–∞ 3 —á–∞—Å–∞
        reminder_time = game_datetime - timedelta(hours=3)

        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ GMT+3
        now = datetime.now(MOSCOW_TZ)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if reminder_time <= now:
            return

        # –ö–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        task_key = f"{game_date}_{game_time}"

        # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if task_key in reminder_tasks:
            reminder_tasks[task_key].cancel()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        delay = (reminder_time - now).total_seconds()
        task = asyncio.create_task(send_reminder_after_delay(delay, game_date))
        reminder_tasks[task_key] = task

        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {game_date} {game_time} (—á–µ—Ä–µ–∑ {delay / 3600:.1f} —á–∞—Å–æ–≤)")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


async def send_reminder_after_delay(delay, game_date):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
    try:
        await asyncio.sleep(delay)
        await send_game_reminder(game_date)
    except asyncio.CancelledError:
        pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


async def send_game_reminder(game_date):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–≥—Ä—É
        game = await db_instance.get_game_by_date(datetime.combine(game_date, datetime.min.time()))
        if not game:
            return

        players = game.get_players()
        if not players:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö
        users_info = await db_instance.get_users_info(players)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        player_names = []
        for player_id in players:
            if player_id in users_info:
                player_names.append(users_info[player_id])
            else:
                player_names.append(f"User{player_id}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        date_str = game_date.strftime("%d.%m.%Y")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ –ë–î
        if game.time:
            if isinstance(game.time, str):
                time_str = game.time[:5]  # –û–±—Ä–µ–∑–∞–µ–º —Å–µ–∫—É–Ω–¥—ã 15:00:00 -> 15:00
            else:
                time_str = game.time.strftime("%H:%M")
        else:
            time_str = "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        location_str = game.location if game.location else "–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        message = (
            f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏–≥—Ä–µ!</b>\n\n"
            f"üéæ –ò–≥—Ä–∞ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞\n"
            f"üïê {time_str}\n"
            f"üìç {location_str}\n\n"
            f"üë• {', '.join(player_names)}\n\n"
            f"–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫–æ—Ä—Ç–µ! üéæ"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        for player_id in players:
            try:
                await bot_instance.send_message(player_id, message, parse_mode="HTML")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player_id}: {e}")

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã {date_str} {time_str}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")


async def check_and_schedule_all_games():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∏–≥—Ä—ã –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        games = await db_instance.get_upcoming_games_with_time(limit=100)

        for game in games:
            if game.time and len(game.get_players()) > 0:
                await schedule_reminder(game.date.date(), game.time)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–≥—Ä: {e}")


def init_reminder_system(bot, db):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    global bot_instance, db_instance
    bot_instance = bot
    db_instance = db

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä
    asyncio.create_task(check_and_schedule_all_games())

    logger.info("–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
