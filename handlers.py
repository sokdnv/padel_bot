from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from datetime import datetime
import logging

from database import Database

logger = logging.getLogger(__name__)
router = Router()

def get_user_display_name(user) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user.username:
        return f"@{user.username}"
    elif user.first_name:
        return user.first_name
    else:
        return f"User{user.id}"

async def format_games_list(db: Database) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    games = await db.get_upcoming_games()
    
    if not games:
        return "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä"
    
    text = "üéæ <b>–ò–≥—Ä—ã –Ω–∞ –ø–∞–¥–µ–ª (–ß–µ—Ç–≤–µ—Ä–≥–∏ 15:00-17:00)</b>\n\n"
    
    for game in games:
        date_str = game.date.strftime("%d.%m.%Y")
        players_count = len(game.get_players())
        free_slots = game.free_slots()
        
        status_emoji = "‚úÖ" if free_slots > 0 else "‚ùå"
        
        text += f"{status_emoji} <b>{date_str}</b>\n"
        text += f"üìä –ó–∞–Ω—è—Ç–æ: {players_count}/4 | –°–≤–æ–±–æ–¥–Ω–æ: {free_slots}\n"
        
        if players_count > 0:
            text += "üë• –ó–∞–ø–∏—Å–∞–Ω—ã: "
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            text += f"{players_count} –∏–≥—Ä–æ–∫(–æ–≤)\n"
        
        text += "\n"
    
    return text

def create_games_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–≥—Ä–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä—ã", callback_data="show_games")],
        [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="register_menu")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unregister_menu")]
    ])
    return keyboard

async def create_date_selection_keyboard(db: Database, action: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    games = await db.get_upcoming_games()
    keyboard = []
    
    for game in games:
        date_str = game.date.strftime("%d.%m")
        free_slots = game.free_slots()
        
        if action == "register" and free_slots > 0:
            text = f"{date_str} (—Å–≤–æ–±–æ–¥–Ω–æ: {free_slots})"
            callback_data = f"register_{game.date.strftime('%Y-%m-%d')}"
            keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])
        elif action == "unregister":
            text = f"{date_str}"
            callback_data = f"unregister_{game.date.strftime('%Y-%m-%d')}"
            keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(Command("start"))
async def start_command(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await db.save_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    
    text = (
        "üéæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–∞–¥–µ–ª!</b>\n\n"
        "–ú—ã –∏–≥—Ä–∞–µ–º –∫–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ —Å 15:00 –¥–æ 17:00\n"
        "–ú–∞–∫—Å–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∫–æ—Ä—Ç\n\n"
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    )
    
    await message.answer(text, reply_markup=create_games_keyboard(), parse_mode="HTML")

@router.message(Command("games"))
async def games_command(message: Message, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /games"""
    text = await format_games_list(db)
    await message.answer(text, reply_markup=create_games_keyboard(), parse_mode="HTML")

@router.callback_query(F.data == "show_games")
async def show_games_callback(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä"""
    text = await format_games_list(db)
    await callback.message.edit_text(text, reply_markup=create_games_keyboard(), parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "register_menu")
async def register_menu_callback(callback: CallbackQuery, db: Database):
    """–ú–µ–Ω—é –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É"""
    keyboard = await create_date_selection_keyboard(db, "register")
    text = "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏"
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "unregister_menu")
async def unregister_menu_callback(callback: CallbackQuery, db: Database):
    """–ú–µ–Ω—é –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∏–≥—Ä—ã"""
    keyboard = await create_date_selection_keyboard(db, "unregister")
    text = "‚ùå <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:</b>"
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("register_"))
async def register_player_callback(callback: CallbackQuery, db: Database):
    """–ó–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∏–≥—Ä—É"""
    date_str = callback.data.split("_")[1]
    date = datetime.strptime(date_str, "%Y-%m-%d")
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è
    game = await db.get_game_by_date(date)
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    if game.has_player(user_id):
        await callback.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É", show_alert=True)
        return
    
    if game.is_full():
        await callback.answer("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç", show_alert=True)
        return
    
    # –ó–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞
    success = await db.register_player(date, user_id)
    if success:
        user_name = get_user_display_name(callback.from_user)
        date_formatted = date.strftime("%d.%m.%Y")
        await callback.answer(f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {date_formatted}", show_alert=True)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        text = await format_games_list(db)
        await callback.message.edit_text(text, reply_markup=create_games_keyboard(), parse_mode="HTML")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏", show_alert=True)

@router.callback_query(F.data.startswith("unregister_"))
async def unregister_player_callback(callback: CallbackQuery, db: Database):
    """–û—Ç–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –æ—Ç –∏–≥—Ä—ã"""
    date_str = callback.data.split("_")[1]
    date = datetime.strptime(date_str, "%Y-%m-%d")
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –∏–≥—Ä–æ–∫
    game = await db.get_game_by_date(date)
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    if not game.has_player(user_id):
        await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É", show_alert=True)
        return
    
    # –û—Ç–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞
    success = await db.unregister_player(date, user_id)
    if success:
        date_formatted = date.strftime("%d.%m.%Y")
        await callback.answer(f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç {date_formatted}", show_alert=True)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        text = await format_games_list(db)
        await callback.message.edit_text(text, reply_markup=create_games_keyboard(), parse_mode="HTML")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏", show_alert=True)

@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery, db: Database):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = await format_games_list(db)
    await callback.message.edit_text(text, reply_markup=create_games_keyboard(), parse_mode="HTML")
    await callback.answer()

