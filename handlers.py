import logging
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from database import Database
from scheduler import schedule_reminder

logger = logging.getLogger(__name__)
router = Router()


async def send_notification_to_all_users(bot, db: Database, message: str, exclude_user_id: int = None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        all_users = await db.get_all_users()
        for user_id in all_users:
            if exclude_user_id and user_id == exclude_user_id:
                continue  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

            try:
                await bot.send_message(user_id, message, parse_mode="HTML")
            except Exception as e:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                continue

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


def get_user_display_name(user) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user.username:
        return f"@{user.username}"
    if user.first_name:
        return user.first_name
    return f"User{user.id}"


async def format_games_list(db: Database, games: list, users_info: dict = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not games:
        return "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä"
    text = ""
    for game in games:
        date_str = game.date.strftime("%d.%m.%Y")
        players_count = len(game.get_players())
        free_slots = game.free_slots()
        status_emoji = "üîç" if free_slots > 0 else "‚úÖ"
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        time_info = ""
        if game.time:
            time_info = f"{game.time}"
            if game.duration:
                hours = game.duration // 60
                minutes = game.duration % 60
                if minutes == 0:
                    time_info += f" ({hours}—á)"
                else:
                    time_info += f" ({hours}—á {minutes}–º)"
        text += f"{status_emoji} <b>{date_str}</b>  "
        if time_info:
            text += f"{time_info}\n"
        if game.location:
            text += f"üìç {game.location}\n"
        text += f"üìä –ó–∞–Ω—è—Ç–æ: {players_count}/4\n"
        if players_count > 0 and users_info:
            text += "üë• –ó–∞–ø–∏—Å–∞–Ω—ã: "
            player_names = []
            for player_id in game.get_players():
                if player_id in users_info:
                    player_names.append(users_info[player_id])
                else:
                    player_names.append(f"User{player_id}")
            text += ", ".join(player_names) + "\n"
        elif players_count > 0:
            text += f"üë• –ó–∞–ø–∏—Å–∞–Ω—ã: {players_count} –∏–≥—Ä–æ–∫(–æ–≤)\n"
        text += "\n"
    return text


def create_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üü¢ –°–≤–æ–±–æ–¥–Ω—ã–µ –∏–≥—Ä—ã", callback_data="show_available_games_0")],
            [InlineKeyboardButton(text="üë§ –ú–æ–∏ –∏–≥—Ä—ã", callback_data="show_my_games_0")],
            [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="register_menu_0")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –∏–≥—Ä—ã", callback_data="unregister_menu_0")],
        ],
    )
    return keyboard


def create_pagination_keyboard(
    action: str,
    page: int,
    total_pages: int,
    has_next: bool = False,
    has_prev: bool = False,
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if has_prev:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{action}_{page - 1}"))

    if total_pages > 1:
        nav_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="current_page"))

    if has_next:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{action}_{page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])


async def create_date_selection_keyboard(
    db: Database,
    action: str,
    user_id: int = None,
    page: int = 0,
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    GAMES_PER_PAGE = 4
    offset = page * GAMES_PER_PAGE

    if action == "register":
        games = await db.get_available_games(limit=GAMES_PER_PAGE, offset=offset, exclude_user_id=user_id)
        total_count = (
            await db.count_available_games_excluding_user(user_id) if user_id else await db.count_available_games()
        )
    elif action == "unregister" and user_id:
        games = await db.get_user_games(user_id, limit=GAMES_PER_PAGE, offset=offset)
        total_count = await db.count_user_games(user_id)
    else:
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]],
        )

    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–≥—Ä–∞–º–∏
    for game in games:
        date_str = game.date.strftime("%d.%m")

        if action == "register":
            free_slots = game.free_slots()
            text = f"{date_str} (—Å–≤–æ–±–æ–¥–Ω–æ: {free_slots})"
            callback_data = f"register_{game.date.strftime('%Y-%m-%d')}"
        else:  # unregister
            text = f"{date_str}"
            callback_data = f"unregister_{game.date.strftime('%Y-%m-%d')}"

        keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    total_pages = (total_count + GAMES_PER_PAGE - 1) // GAMES_PER_PAGE
    has_prev = page > 0
    has_next = page < total_pages - 1

    nav_buttons = []
    if has_prev:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{action}_menu_{page - 1}"))

    if total_pages > 1:
        nav_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="current_page"))

    if has_next:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{action}_menu_{page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.message(Command("start"))
async def start_command(message: Message, db: Database, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await db.save_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name,
    )

    text = "üéæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–∞–¥–µ–ª!</b>\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"

    await message.answer(text, reply_markup=create_main_keyboard(), parse_mode="HTML")


@router.message(Command("games"))
async def games_command(message: Message, db: Database, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /games"""
    await show_available_games(message, db, page=0, edit=False)


async def show_available_games(message_or_callback, db: Database, page: int = 0, edit: bool = True):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–≥—Ä—ã"""
    GAMES_PER_PAGE = 4
    offset = page * GAMES_PER_PAGE

    games = await db.get_available_games(limit=GAMES_PER_PAGE, offset=offset)
    total_count = await db.count_available_games()
    total_pages = (total_count + GAMES_PER_PAGE - 1) // GAMES_PER_PAGE

    if not games:
        text = "üö´ –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∏–≥—Ä"
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        all_player_ids = []
        for game in games:
            all_player_ids.extend(game.get_players())

        users_info = await db.get_users_info(list(set(all_player_ids))) if all_player_ids else {}

        text = "üü¢ <b>–°–≤–æ–±–æ–¥–Ω—ã–µ –∏–≥—Ä—ã</b>\n\n" + await format_games_list(db, games, users_info)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"show_available_games_{page - 1}"))

    if total_pages > 1:
        nav_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="current_page"))

    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"show_available_games_{page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.append(
        [
            InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="register_menu_0"),
            InlineKeyboardButton(text="üë§ –ú–æ–∏ –∏–≥—Ä—ã", callback_data="show_my_games_0"),
        ],
    )

    # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if edit and hasattr(message_or_callback, "message"):
        await message_or_callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
    else:
        await message_or_callback.answer(text, reply_markup=reply_markup, parse_mode="HTML")


async def show_my_games(message_or_callback, db: Database, user_id: int, page: int = 0, edit: bool = True):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    GAMES_PER_PAGE = 4
    offset = page * GAMES_PER_PAGE

    games = await db.get_user_games(user_id, limit=GAMES_PER_PAGE, offset=offset)
    total_count = await db.count_user_games(user_id)
    total_pages = (total_count + GAMES_PER_PAGE - 1) // GAMES_PER_PAGE

    if not games:
        text = "üë§ <b>–ú–æ–∏ –∏–≥—Ä—ã</b>\n\nüö´ –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∏–≥—Ä—É"
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        all_player_ids = []
        for game in games:
            all_player_ids.extend(game.get_players())

        users_info = await db.get_users_info(list(set(all_player_ids))) if all_player_ids else {}

        text = "üë§ <b>–ú–æ–∏ –∏–≥—Ä—ã</b>\n\n" + await format_games_list(db, games, users_info)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"show_my_games_{page - 1}"))

    if total_pages > 1:
        nav_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="current_page"))

    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"show_my_games_{page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.append(
        [
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å—Å—è –∏–∑ –∏–≥—Ä—ã", callback_data="unregister_menu_0"),
            InlineKeyboardButton(text="üü¢ –°–≤–æ–±–æ–¥–Ω—ã–µ –∏–≥—Ä—ã", callback_data="show_available_games_0"),
        ],
    )

    # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if edit and hasattr(message_or_callback, "message"):
        await message_or_callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
    else:
        await message_or_callback.answer(text, reply_markup=reply_markup, parse_mode="HTML")


@router.callback_query(F.data.startswith("show_available_games_"))
async def show_available_games_callback(callback: CallbackQuery, db: Database, bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–≥—Ä—ã"""
    page = int(callback.data.split("_")[-1])
    await show_available_games(callback, db, page=page, edit=True)
    await callback.answer()


@router.callback_query(F.data.startswith("show_my_games_"))
async def show_my_games_callback(callback: CallbackQuery, db: Database, bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∏–≥—Ä—ã"""
    page = int(callback.data.split("_")[-1])
    await show_my_games(callback, db, callback.from_user.id, page=page, edit=True)
    await callback.answer()


@router.callback_query(F.data.startswith("register_menu_"))
async def register_menu_callback(callback: CallbackQuery, db: Database, bot):
    """–ú–µ–Ω—é –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É"""
    page = int(callback.data.split("_")[-1])
    keyboard = await create_date_selection_keyboard(db, "register", user_id=callback.from_user.id, page=page)
    text = "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>\n\n"

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("unregister_menu_"))
async def unregister_menu_callback(callback: CallbackQuery, db: Database, bot):
    """–ú–µ–Ω—é –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∏–≥—Ä—ã"""
    page = int(callback.data.split("_")[-1])
    keyboard = await create_date_selection_keyboard(db, "unregister", user_id=callback.from_user.id, page=page)
    text = "‚ùå <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:</b>\n\n"

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("register_"))
async def register_player_callback(callback: CallbackQuery, db: Database, bot):
    """–ó–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∏–≥—Ä—É"""
    if callback.data.startswith("register_menu_"):
        return  # –≠—Ç–æ –≤—ã–∑–æ–≤ –º–µ–Ω—é, –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

    date_str = callback.data.split("_")[1]
    date = datetime.strptime(date_str, "%Y-%m-%d")
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è
    game = await db.get_game_by_date(date)
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    if game.has_player(user_id):
        await callback.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É", show_alert=True)
        return

    if game.is_full():
        await callback.answer("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç", show_alert=True)
        return

    # –ó–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞
    success = await db.register_player(date, user_id)
    if success:
        date_formatted = date.strftime("%d.%m.%Y")
        user_name = get_user_display_name(callback.from_user)

        await callback.answer(f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {date_formatted}", show_alert=True)

        updated_game = await db.get_game_by_date(date)
        if updated_game and updated_game.time:
            await schedule_reminder(date.date(), updated_game.time)

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        notification_message = f"üéæ <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É!</b>\n\n{user_name} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ <b>{date_formatted}</b>"
        await send_notification_to_all_users(bot, db, notification_message, exclude_user_id=user_id)

        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        text = "üéæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–∞–¥–µ–ª!</b>\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        await callback.message.edit_text(text, reply_markup=create_main_keyboard(), parse_mode="HTML")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏", show_alert=True)


@router.callback_query(F.data.startswith("unregister_"))
async def unregister_player_callback(callback: CallbackQuery, db: Database, bot):
    """–û—Ç–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –æ—Ç –∏–≥—Ä—ã"""
    if callback.data.startswith("unregister_menu_"):
        return  # –≠—Ç–æ –≤—ã–∑–æ–≤ –º–µ–Ω—é, –Ω–µ –æ—Ç–ø–∏—Å–∫–∞

    date_str = callback.data.split("_")[1]
    date = datetime.strptime(date_str, "%Y-%m-%d")
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –∏–≥—Ä–æ–∫
    game = await db.get_game_by_date(date)
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    if not game.has_player(user_id):
        await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É", show_alert=True)
        return

    # –û—Ç–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞
    success = await db.unregister_player(date, user_id)
    if success:
        date_formatted = date.strftime("%d.%m.%Y")
        user_name = get_user_display_name(callback.from_user)

        await callback.answer(f"‚úÖ –í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ {date_formatted}", show_alert=True)

        updated_game = await db.get_game_by_date(date)
        if updated_game and updated_game.time and len(updated_game.get_players()) > 0:
            await schedule_reminder(date.date(), updated_game.time)

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        notification_message = (
            f"‚ö†Ô∏è <b>–ò–≥—Ä–æ–∫ —É–¥–∞–ª–∏–ª—Å—è</b>\n\n{user_name} —É–¥–∞–ª–∏–ª—Å—è –∏–∑ –∏–≥—Ä—ã <b>{date_formatted}</b>\n\nüîì –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ!"
        )
        await send_notification_to_all_users(bot, db, notification_message, exclude_user_id=user_id)

        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        text = "üéæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–∞–¥–µ–ª!</b>\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        await callback.message.edit_text(text, reply_markup=create_main_keyboard(), parse_mode="HTML")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery, bot):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = "üéæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–∞–¥–µ–ª!</b>\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    await callback.message.edit_text(text, reply_markup=create_main_keyboard(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "current_page")
async def current_page_callback(callback: CallbackQuery, bot):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    await callback.answer()
