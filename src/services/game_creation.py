"""–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏."""

from dataclasses import dataclass
from datetime import datetime, time
from typing import Any

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message, User

from src.config import logger
from src.database.db import Database
from src.services.core import NotificationService
from src.shared.decorators import handle_service_errors
from src.shared.formatters import Formatters
from src.shared.keyboards import CommonKeyboards, PaginationHelper
from src.shared.responses import ServiceResponse
from src.services.scheduler import ReminderSystem

router = Router()


@dataclass
class GameCreationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä."""

    min_duration: int = 60
    max_duration: int = 180
    games_per_page: int = 4
    auto_register_creator: bool = True


class GameCreation(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã."""

    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_duration = State()
    waiting_for_location = State()
    waiting_for_court = State()


class DateTimeParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏."""

    @staticmethod
    def parse_date(date_text: str) -> datetime:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        date_text = date_text.strip()

        # –§–æ—Ä–º–∞—Ç –î–î.–ú–ú
        if len(date_text.split(".")) == 2:  # noqa: PLR2004
            day, month = date_text.split(".")
            year = datetime.now().year  # noqa: DTZ005
            if int(month) < datetime.now().month:  # noqa: DTZ005
                year += 1
            date_str = f"{day}.{month}.{year}"
        else:  # –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
            date_str = date_text

        parsed_date = datetime.strptime(date_str, "%d.%m.%Y")  # noqa: DTZ007

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if parsed_date.date() < datetime.now().date():  # noqa: DTZ005
            msg = "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º"
            raise ValueError(msg)

        return parsed_date

    @staticmethod
    def parse_time(time_text: str) -> time:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        return datetime.strptime(time_text.strip(), "%H:%M").time()  # noqa: DTZ007

    @staticmethod
    def validate_duration(duration: int, config: GameCreationConfig) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        return config.min_duration <= duration <= config.max_duration


class GameCreationService:
    """–°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä."""

    def __init__(  # noqa: D107
            self,
            db: Database,
            bot: Bot,
            reminder_system: ReminderSystem | None = None,
            config: GameCreationConfig | None = None,
    ) -> None:
        self.db = db
        self.bot = bot
        self.reminder_system = reminder_system
        self.config = config or GameCreationConfig()

    @handle_service_errors("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã")
    async def create_game(self, game_data: dict[str, Any], creator: User) -> ServiceResponse:
        """–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É."""

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –≤ –ë–î
        success = await self.db.create_game(
            date=game_data["date"],
            time=game_data["time"],
            duration=game_data["duration"],
            location=game_data["location"],
            court=game_data["court"],
            admin=creator.id,
        )

        if not success:
            return ServiceResponse.error_response(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã. –í–æ–∑–º–æ–∂–Ω–æ, –∏–≥—Ä–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            )

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
        if self.config.auto_register_creator:
            await self.db.register_player(game_data["date"], creator.id)

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if self.reminder_system:
            await self.reminder_system.schedule_reminder(
                game_data["date"].date(),
                game_data["time"],
            )

        return ServiceResponse.success_response(
            "‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
            data={"game_data": game_data, "creator": creator},
            alert=False,
        )

    @handle_service_errors("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã")
    async def delete_game(self, game_date: datetime, user: User) -> ServiceResponse:
        """–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É."""

        # –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É
        game = await self.db.get_game_by_date(game_date)
        if not game:
            return ServiceResponse.error_response("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞
        if game.admin != user.id:
            return ServiceResponse.error_response("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∏–≥—Ä—ã")

        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        players = game.get_players()

        # –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É
        success = await self.db.delete_game(game_date, user.id)
        if success:
            return ServiceResponse.success_response(
                "‚úÖ –ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞",
                data={
                    "players": [p for p in players if p != user.id],
                    "date_formatted": Formatters.format_date(game_date),
                },
                alert=False,
            )
        else:
            return ServiceResponse.error_response("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã")


class GameManagementKeyboards:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏."""

    @staticmethod
    def create_main_menu() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏."""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", callback_data="create_game")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã", callback_data="my_created_games_0")],
            CommonKeyboards.create_back_to_main_button(),
        ])

    @staticmethod
    def create_cancel_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã."""
        return CommonKeyboards.create_cancel_keyboard()

    @staticmethod
    async def create_my_games_keyboard(
            db: Database,
            user_id: int,
            page: int = 0,
            config: GameCreationConfig | None = None,
    ) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–≥—Ä–∞–º–∏."""
        if not config:
            config = GameCreationConfig()

        offset = page * config.games_per_page
        games = await db.get_created_games(user_id, limit=config.games_per_page, offset=offset)
        total_count = await db.count_created_games(user_id)
        total_pages = (total_count + config.games_per_page - 1) // config.games_per_page

        keyboard = []

        # –ö–Ω–æ–ø–∫–∏ —Å –∏–≥—Ä–∞–º–∏
        for game in games:
            date_str = Formatters.format_short_date(game.date)
            time_str = f" –≤ {game.time}" if game.time else ""
            button_text = f"üóë {date_str}{time_str}"
            callback_data = f"delete_game_{game.date.strftime('%Y-%m-%d')}"
            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = PaginationHelper.create_navigation_buttons("my_created_games", page, total_pages)
        if nav_buttons:
            keyboard.append(nav_buttons)

        keyboard.append(CommonKeyboards.create_back_to_main_button())

        return InlineKeyboardMarkup(inline_keyboard=keyboard)


class GameCreationMessages:
    """–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä."""

    @staticmethod
    def get_date_prompt() -> str:
        """–ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã."""
        return (
            "üìÖ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–≥—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 –∏–ª–∏ 25.12"
        )

    @staticmethod
    def get_time_prompt() -> str:
        """–ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏."""
        return "üïê <b>–í—Ä–µ–º—è –∏–≥—Ä—ã</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 19:30"

    @staticmethod
    def get_duration_prompt(config: GameCreationConfig) -> str:
        """–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        return (
            f"‚è± <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö "
            f"(–æ—Ç {config.min_duration} –¥–æ {config.max_duration}):"
        )

    @staticmethod
    def get_location_prompt() -> str:
        """–ó–∞–ø—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏."""
        return "üìç <b>–õ–æ–∫–∞—Ü–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã:"

    @staticmethod
    def get_court_prompt() -> str:
        """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∫–æ—Ä—Ç–∞."""
        return "üéæ <b>–ù–æ–º–µ—Ä –∫–æ—Ä—Ç–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—Ä—Ç–∞"

    @staticmethod
    def format_success_message(game_data: dict[str, Any]) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏."""
        return Formatters.format_game_success_message(game_data)

    @staticmethod
    def format_notification_message(game_data: dict[str, Any], creator: User) -> str:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∏–≥—Ä–µ."""
        return Formatters.format_game_notification_message(game_data, creator)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
game_creation_service: GameCreationService | None = None
game_creation_config: GameCreationConfig | None = None


def init_game_management(
        db: Database,
        bot: Bot,
        reminder_system: ReminderSystem | None = None,
        config: GameCreationConfig | None = None,
) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏."""
    global game_creation_service, game_creation_config  # noqa: PLW0603
    game_creation_config = config or GameCreationConfig()
    game_creation_service = GameCreationService(db, bot, reminder_system, game_creation_config)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "game_management")
async def game_management_menu(callback: CallbackQuery) -> None:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏."""
    text = "üéÆ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await callback.message.edit_text(
        text,
        reply_markup=GameManagementKeyboards.create_main_menu(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data == "create_game")
async def start_game_creation(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã."""
    text = GameCreationMessages.get_date_prompt()
    keyboard = GameManagementKeyboards.create_cancel_keyboard()

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(GameCreation.waiting_for_date)
    await callback.answer()


@router.message(GameCreation.waiting_for_date)
async def process_date(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã."""
    try:
        game_date = DateTimeParser.parse_date(message.text)
        await state.update_data(date=game_date)

        text = GameCreationMessages.get_time_prompt()
        keyboard = GameManagementKeyboards.create_cancel_keyboard()

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(GameCreation.waiting_for_time)

    except ValueError as e:
        if "–ø—Ä–æ—à–ª–æ–º" in str(e):
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú")


@router.message(GameCreation.waiting_for_time)
async def process_time(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    try:
        game_time = DateTimeParser.parse_time(message.text)
        await state.update_data(time=game_time)

        text = GameCreationMessages.get_duration_prompt(game_creation_config)
        keyboard = GameManagementKeyboards.create_cancel_keyboard()

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(GameCreation.waiting_for_duration)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19:30)")


@router.message(GameCreation.waiting_for_duration)
async def process_duration(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    try:
        duration = int(message.text.strip())

        if not DateTimeParser.validate_duration(duration, game_creation_config):
            await message.answer(
                f"‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {game_creation_config.min_duration} "
                f"–¥–æ {game_creation_config.max_duration} –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            )
            return

        await state.update_data(duration=duration)

        text = GameCreationMessages.get_location_prompt()
        keyboard = GameManagementKeyboards.create_cancel_keyboard()

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(GameCreation.waiting_for_location)

    except ValueError:
        await message.answer(
            f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {game_creation_config.min_duration} "
            f"–¥–æ {game_creation_config.max_duration}",
        )


@router.message(GameCreation.waiting_for_location)
async def process_location(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–∫–∞—Ü–∏–∏."""
    location = message.text.strip()
    await state.update_data(location=location)

    text = GameCreationMessages.get_court_prompt()
    keyboard = GameManagementKeyboards.create_cancel_keyboard()

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(GameCreation.waiting_for_court)


@router.message(GameCreation.waiting_for_court)
async def process_court(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–æ—Ä—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã."""
    try:
        court = int(message.text.strip())
        game_data = await state.get_data()
        game_data["court"] = court

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
        result = await game_creation_service.create_game(game_data, message.from_user)

        if result.success:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
            success_text = GameCreationMessages.format_success_message(game_data)
            await message.answer(
                success_text,
                reply_markup=CommonKeyboards.create_main_keyboard(),
                parse_mode="HTML",
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Ñ–æ–Ω–µ
            notification_text = GameCreationMessages.format_notification_message(
                game_data, message.from_user,
            )
            NotificationService.send_to_all_users_async(
                game_creation_service.bot,
                game_creation_service.db,
                notification_text,
                exclude_user_id=message.from_user.id,
            )
        else:
            await message.answer(result.message)

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")


@router.callback_query(F.data.startswith("my_created_games_"))
async def show_my_created_games(callback: CallbackQuery, db: Database) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–≥—Ä—ã."""
    page = int(callback.data.split("_")[-1])

    games = await db.get_created_games(
        callback.from_user.id,
        limit=game_creation_config.games_per_page,
        offset=page * game_creation_config.games_per_page,
    )

    text = ("üö´ –í—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∏–≥—Ä" if not games
            else "üóë <b>–ú–æ–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n")

    keyboard = await GameManagementKeyboards.create_my_games_keyboard(
        db, callback.from_user.id, page, game_creation_config,
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("delete_game_"))
async def delete_game(callback: CallbackQuery) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã."""
    date_str = callback.data.split("_")[2]
    game_date = datetime.strptime(date_str, "%Y-%m-%d")  # noqa: DTZ007

    result = await game_creation_service.delete_game(game_date, callback.from_user)

    if result.success:
        data = result.data or {}
        await callback.answer(f"‚úÖ –ò–≥—Ä–∞ –Ω–∞ {data.get('date_formatted', '')} —É–¥–∞–ª–µ–Ω–∞", show_alert=True)

        # –£–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ
        players = data.get("players", [])
        if players:
            creator_name = Formatters.get_display_name(callback.from_user)
            notification_text = (
                f"‚ùå <b>–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
                f"–°–æ–∑–¥–∞—Ç–µ–ª—å {creator_name} –æ—Ç–º–µ–Ω–∏–ª –∏–≥—Ä—É –Ω–∞ <b>{data.get('date_formatted', '')}</b>\n"
                f"–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!"
            )

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º –≤ —Ñ–æ–Ω–µ
            NotificationService.send_to_players_async(
                game_creation_service.bot, notification_text, players
            )

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        text = "üéæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–∞–¥–µ–ª!</b>\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        await callback.message.edit_text(
            text,
            reply_markup=CommonKeyboards.create_main_keyboard(),
            parse_mode="HTML",
        )
    else:
        await callback.answer(result.message, show_alert=True)
