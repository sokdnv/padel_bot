"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–≥—Ä–æ–∫–∞–º."""

import asyncio
import logging
from dataclasses import dataclass
from datetime import date, datetime, time, timedelta, timezone

logger = logging.getLogger(__name__)


@dataclass
class ReminderConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""

    timezone: timezone = timezone(timedelta(hours=3))
    reminder_hours_before: int = 3
    max_upcoming_games: int = 100


class TimeFormatter:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏."""

    @staticmethod
    def parse_time(time_value: str | time) -> time | None:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤."""
        if not time_value:
            return None

        if isinstance(time_value, str):
            try:
                return datetime.strptime(time_value, "%H:%M:%S").time()  # noqa: DTZ007
            except ValueError:
                try:
                    return datetime.strptime(time_value, "%H:%M").time()  # noqa: DTZ007
                except ValueError:
                    return None

        return time_value if isinstance(time_value, time) else None

    @staticmethod
    def format_time(time_value: str | time) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        if not time_value:
            return "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        if isinstance(time_value, str):
            return time_value[:5] if len(time_value) >= 5 else time_value  # noqa: PLR2004

        return time_value.strftime("%H:%M")

    @staticmethod
    def format_date(date_value: date) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        return date_value.strftime("%d.%m.%Y")


class MessageFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π."""

    @staticmethod
    def format_reminder_message(
            game_time: str | time,
            location: str | None,
            court: int | None,
            player_names: list[str],
            hours_before: int = 3,
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
        time_str = TimeFormatter.format_time(game_time)
        location_str = location if location else "–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        court_str = f"–ö–æ—Ä—Ç ‚Ññ{court}" if court else "–Ω–æ–º–µ—Ä –∫–æ—Ä—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω"

        return (
            f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏–≥—Ä–µ!</b>\n\n"
            f"üéæ –ò–≥—Ä–∞ —á–µ—Ä–µ–∑ {hours_before} —á–∞—Å–∞\n"
            f"üïê {time_str}\n"
            f"üìç {location_str}\n"
            f"üèüÔ∏è {court_str}\n\n"
            f"üë• {', '.join(player_names)}\n\n"
            f"–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫–æ—Ä—Ç–µ! üéæ"
        )


class ReminderTask:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""

    def __init__(self, game_date: date, game_time: str | time) -> None:  # noqa: D107
        self.game_date = game_date
        self.game_time = game_time
        self.task: asyncio.Task | None = None
        self.key = self._generate_key()

    def _generate_key(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –∑–∞–¥–∞—á–∏."""
        time_str = TimeFormatter.format_time(self.game_time)
        return f"{self.game_date}_{time_str}"

    def cancel(self) -> None:
        """–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏."""
        if self.task and not self.task.done():
            self.task.cancel()

    def is_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏."""
        return self.task is not None and not self.task.done()


class ReminderSystem:
    """–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –∏–≥—Ä–∞—Ö."""

    def __init__(self, bot, database, config: ReminderConfig | None = None) -> None:  # noqa: D107, ANN001
        self.bot = bot
        self.database = database
        self.config = config or ReminderConfig()
        self.reminder_tasks: dict[str, ReminderTask] = {}

    async def schedule_reminder(self, game_date: date, game_time: str | time) -> bool:
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã."""
        try:
            parsed_time = TimeFormatter.parse_time(game_time)
            if not parsed_time:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –∏–≥—Ä—ã: {game_time}")
                return False

            # –°–æ–∑–¥–∞–µ–º datetime –≤ –Ω—É–∂–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
            game_datetime = datetime.combine(game_date, parsed_time, tzinfo=self.config.timezone)
            reminder_time = game_datetime - timedelta(hours=self.config.reminder_hours_before)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
            now = datetime.now(self.config.timezone)
            if reminder_time <= now:
                logger.debug(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ –¥–ª—è –∏–≥—Ä—ã {game_date} {game_time}")
                return False

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_task = ReminderTask(game_date, game_time)

            # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
            old_task = self.reminder_tasks.get(reminder_task.key)
            if old_task:
                old_task.cancel()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            delay = (reminder_time - now).total_seconds()
            reminder_task.task = asyncio.create_task(
                self._send_reminder_after_delay(delay, game_date),
            )

            self.reminder_tasks[reminder_task.key] = reminder_task

            logger.info(
                f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {game_date} {TimeFormatter.format_time(game_time)} "
                f"(—á–µ—Ä–µ–∑ {delay / 3600:.1f} —á–∞—Å–æ–≤)",
            )
            return True  # noqa: TRY300

        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            return False

    async def _send_reminder_after_delay(self, delay: float, game_date: date) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏."""
        try:
            await asyncio.sleep(delay)
            await self._send_game_reminder(game_date)
        except asyncio.CancelledError:
            logger.debug(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {game_date} –æ—Ç–º–µ–Ω–µ–Ω–æ")
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

    async def _send_game_reminder(self, game_date: date) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–≥—Ä—É
            game_datetime = datetime.combine(game_date, datetime.min.time())
            game = await self.database.get_game_by_date(game_datetime)

            if not game or not game.get_players():
                logger.debug(f"–ò–≥—Ä–∞ {game_date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö
            players = game.get_players()
            users_info = await self.database.get_users_info(players)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            player_names = [
                users_info.get(player_id, f"User{player_id}")
                for player_id in players
            ]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = MessageFormatter.format_reminder_message(
                game_time=game.time,
                location=game.location,
                court=game.court,
                player_names=player_names,
                hours_before=self.config.reminder_hours_before,
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            success_count = 0
            for player_id in players:
                try:
                    await self.bot.send_message(player_id, message, parse_mode="HTML")
                    success_count += 1
                except Exception as e:  # noqa: BLE001
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player_id}: {e}")

            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã {TimeFormatter.format_date(game_date)} "
                f"{TimeFormatter.format_time(game.time)} ({success_count}/{len(players)} —É—Å–ø–µ—à–Ω–æ)",
            )

        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

    async def schedule_all_upcoming_games(self) -> None:
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä."""
        try:
            games = await self.database.get_upcoming_games_with_time(
                limit=self.config.max_upcoming_games,
            )

            scheduled_count = 0
            for game in games:
                if game.time and game.get_players():
                    success = await self.schedule_reminder(game.date.date(), game.time)
                    if success:
                        scheduled_count += 1

            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {scheduled_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ {len(games)} –∏–≥—Ä")

        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")


# –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def create_reminder_system(bot, database, config: ReminderConfig | None = None) -> ReminderSystem:  # noqa: ANN001
    """–°–æ–∑–¥–∞—Ç—å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    system = ReminderSystem(bot, database, config)

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä
    asyncio.create_task(system.schedule_all_upcoming_games())  # noqa: RUF006

    logger.info("–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return system


_global_reminder_system: ReminderSystem | None = None


async def schedule_reminder(game_date, game_time):  # noqa: ANN201, ANN001
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""
    if _global_reminder_system is None:
        msg = "–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ init_reminder_system() —Å–Ω–∞—á–∞–ª–∞."
        raise RuntimeError(msg)

    return await _global_reminder_system.schedule_reminder(game_date, game_time)
