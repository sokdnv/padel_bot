"""–ö–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""

import asyncio
from dataclasses import dataclass
from datetime import datetime
from typing import Any

from aiogram import Bot
from aiogram.types import CallbackQuery, Message, User

from src.config import logger
from src.database.db import Database
from src.shared.decorators import handle_service_errors
from src.shared.formatters import Formatters
from src.shared.keyboards import CommonKeyboards, PaginationHelper
from src.shared.responses import ServiceResponse


@dataclass
class BotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞."""

    games_per_page: int = 4
    notification_enabled: bool = True


class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

    @staticmethod
    async def _send_notifications_background(
        bot: Bot,
        db: Database,
        message: str,
        exclude_user_id: int | None = None,
    ) -> dict[str, int]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ."""
        stats = {"sent": 0, "failed": 0}

        try:
            all_users = await db.get_all_users()
            delete_keyboard = CommonKeyboards.create_delete_keyboard()

            for user_id in all_users:
                if exclude_user_id and user_id == exclude_user_id:
                    continue
                try:
                    await bot.send_message(
                        user_id,
                        message,
                        parse_mode="HTML",
                        reply_markup=delete_keyboard,
                    )
                    stats["sent"] += 1
                except Exception as e:  # noqa: BLE001
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    stats["failed"] += 1
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {stats['sent']} —É—Å–ø–µ—à–Ω–æ, {stats['failed']} –Ω–µ—É–¥–∞—á–Ω–æ")
        except Exception as e:  # noqa: BLE001
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return stats

    @staticmethod
    def send_to_all_users_async(
        bot: Bot,
        db: Database,
        message: str,
        exclude_user_id: int | None = None,
    ) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
        asyncio.create_task(NotificationService._send_notifications_background(bot, db, message, exclude_user_id))

    @staticmethod
    async def _send_to_players_background(
        bot: Bot,
        message: str,
        player_ids: list[int],
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º –≤ —Ñ–æ–Ω–µ."""
        for player_id in player_ids:
            try:
                await bot.send_message(
                    player_id,
                    message,
                    parse_mode="HTML",
                )
            except Exception as e:  # noqa: BLE001
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–∞ {player_id}: {e}")

    @staticmethod
    def send_to_players_async(
        bot: Bot,
        message: str,
        player_ids: list[int],
    ) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º –≤ —Ñ–æ–Ω–µ."""
        asyncio.create_task(NotificationService._send_to_players_background(bot, message, player_ids))

    @staticmethod
    async def send_to_all_users(
        bot: Bot,
        db: Database,
        message: str,
        exclude_user_id: int | None = None,
    ) -> dict[str, int]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)."""
        return await NotificationService._send_notifications_background(bot, db, message, exclude_user_id)


class GameService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–∞–º–∏."""

    def __init__(self, db: Database, bot: Bot, reminder_system=None, config: BotConfig | None = None) -> None:  # noqa: D107, ANN001
        self.db = db
        self.bot = bot
        self.reminder_system = reminder_system
        self.config = config or BotConfig()

    async def get_users_for_games(self, games: list) -> dict[int, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä."""
        all_player_ids = set()
        for game in games:
            all_player_ids.update(game.get_players())

        return await self.db.get_users_info(list(all_player_ids)) if all_player_ids else {}

    @handle_service_errors("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    async def register_player(self, game_date: datetime, user: User) -> ServiceResponse:
        """–ó–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∏–≥—Ä—É."""
        # –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É
        game = await self.db.get_game_by_date(game_date)
        if not game:
            return ServiceResponse.error_response("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        if game.has_player(user.id):
            return ServiceResponse.error_response("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É")

        if game.is_full():
            return ServiceResponse.error_response("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç")

        # –ó–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞
        success = await self.db.register_player(game_date, user.id)
        if success:
            date_formatted = Formatters.format_date(game_date)
            user_name = Formatters.get_display_name(user)

            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ reminder_system
            updated_game = await self.db.get_game_by_date(game_date)
            if updated_game and updated_game.time and self.reminder_system:
                try:
                    await self.reminder_system.schedule_reminder(game_date.date(), updated_game.time)
                    logger.debug(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∏–≥—Ä—ã {date_formatted}")
                except Exception as e:  # noqa: BLE001
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
            if self.config.notification_enabled:
                notification_message = (
                    f"üéæ <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É!</b>\n\n{user_name} –∑–∞–ø–∏—Å–∞–ª—Å—è/-–ª–∞—Å—å –Ω–∞ <b>{date_formatted}</b>"
                )
                NotificationService.send_to_all_users_async(
                    self.bot,
                    self.db,
                    notification_message,
                    exclude_user_id=user.id,
                )

            return ServiceResponse.success_response(f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {date_formatted}", alert=False)
        return ServiceResponse.error_response("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏")

    @handle_service_errors("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    async def unregister_player(self, game_date: datetime, user: User) -> ServiceResponse:
        """–û—Ç–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –æ—Ç –∏–≥—Ä—ã."""
        # –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É
        game = await self.db.get_game_by_date(game_date)
        if not game:
            return ServiceResponse.error_response("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        if not game.has_player(user.id):
            return ServiceResponse.error_response("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É")

        # –û—Ç–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞
        success = await self.db.unregister_player(game_date, user.id)
        if success:
            date_formatted = Formatters.format_date(game_date)
            user_name = Formatters.get_display_name(user)

            # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ reminder_system
            updated_game = await self.db.get_game_by_date(game_date)
            if updated_game and updated_game.time and len(updated_game.get_players()) > 0 and self.reminder_system:
                try:
                    await self.reminder_system.schedule_reminder(game_date.date(), updated_game.time)
                    logger.debug(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∏–≥—Ä—ã {date_formatted}")
                except Exception as e:  # noqa: BLE001
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
            if self.config.notification_enabled:
                notification_message = (
                    f"‚ö†Ô∏è <b>–ò–≥—Ä–æ–∫ —É–¥–∞–ª–∏–ª—Å—è</b>\n\n"
                    f"{user_name} —É–¥–∞–ª–∏–ª—Å—è/-–ª–∞—Å—å –∏–∑ –∏–≥—Ä—ã <b>{date_formatted}</b>\n\n"
                    f"üîì –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ!"
                )
                NotificationService.send_to_all_users_async(
                    self.bot,
                    self.db,
                    notification_message,
                    exclude_user_id=user.id,
                )

            return ServiceResponse.success_response(f"‚úÖ –í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ {date_formatted}", alert=False)
        return ServiceResponse.error_response("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")


class GameListHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–æ–≤ –∏–≥—Ä."""

    def __init__(self, game_service: GameService, config: BotConfig | None = None) -> None:  # noqa: D107
        self.game_service = game_service
        self.config = config or BotConfig()

    async def show_available_games(
        self,
        message_or_callback: Message | CallbackQuery,
        page: int = 0,
        edit: bool = True,  # noqa: FBT001, FBT002
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–≥—Ä—ã."""
        offset = page * self.config.games_per_page

        games = await self.game_service.db.get_upcoming_games(
            limit=self.config.games_per_page,
            offset=offset,
        )
        total_count = await self.game_service.db.count_upcoming_games()
        total_pages = (total_count + self.config.games_per_page - 1) // self.config.games_per_page

        if not games:
            text = "üö´ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä"
        else:
            users_info = await self.game_service.get_users_for_games(games)
            text = "üü¢ <b>–í—Å–µ –∏–≥—Ä—ã</b>\n\n" + await Formatters.format_games_list(
                games,
                users_info,
            )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        from aiogram.types import InlineKeyboardButton  # –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞

        additional_buttons = [
            [
                InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="register_menu_0"),
                InlineKeyboardButton(text="üë§ –ú–æ–∏ –∏–≥—Ä—ã", callback_data="show_my_games_0"),
            ],
        ]

        keyboard = PaginationHelper.create_paginated_keyboard(
            "show_available_games",
            page,
            total_pages,
            additional_buttons,
        )

        await self._send_or_edit_message(message_or_callback, text, keyboard, edit)

    async def show_my_games(
        self,
        message_or_callback: Message | CallbackQuery,
        user_id: int,
        page: int = 0,
        edit: bool = True,  # noqa: FBT001, FBT002
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        offset = page * self.config.games_per_page

        games = await self.game_service.db.get_user_games(
            user_id,
            limit=self.config.games_per_page,
            offset=offset,
        )
        total_count = await self.game_service.db.count_user_games(user_id)
        total_pages = (total_count + self.config.games_per_page - 1) // self.config.games_per_page

        if not games:
            text = "üë§ <b>–ú–æ–∏ –∏–≥—Ä—ã</b>\n\nüö´ –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∏–≥—Ä—É"
        else:
            users_info = await self.game_service.get_users_for_games(games)
            text = "üë§ <b>–ú–æ–∏ –∏–≥—Ä—ã</b>\n\n" + await Formatters.format_games_list(
                games,
                users_info,
            )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        from aiogram.types import InlineKeyboardButton  # –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞

        additional_buttons = [
            [
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å—Å—è", callback_data="unregister_menu_0"),
                InlineKeyboardButton(text="üü¢ –í—Å–µ –∏–≥—Ä—ã", callback_data="show_available_games_0"),
            ],
        ]

        keyboard = PaginationHelper.create_paginated_keyboard(
            "show_my_games",
            page,
            total_pages,
            additional_buttons,
        )

        await self._send_or_edit_message(message_or_callback, text, keyboard, edit)

    @staticmethod
    async def _send_or_edit_message(
        message_or_callback: Message | CallbackQuery,
        text: str,
        keyboard: Any,
        edit: bool,  # noqa: FBT001
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        if edit and hasattr(message_or_callback, "message"):
            await message_or_callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message_or_callback.answer(text, reply_markup=keyboard, parse_mode="HTML")
