"""–ö–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
from dataclasses import dataclass
from datetime import datetime

from aiogram import Bot
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message, User

from src.config import logger
from src.database.db import Database


@dataclass
class BotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞."""

    games_per_page: int = 4
    notification_enabled: bool = True


class UserFormatter:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    @staticmethod
    def get_display_name(user: User) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if user.username:
            return f"@{user.username}"
        if user.first_name:
            return user.first_name
        return f"User{user.id}"


class GameFormatter:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä."""

    @staticmethod
    def format_date(date: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É."""
        return date.strftime("%d.%m.%Y")

    @staticmethod
    def format_short_date(date: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –¥–∞—Ç—É."""
        return date.strftime("%d.%m")

    @staticmethod
    def format_time_duration(time: str, duration: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å."""
        time_info = time
        if duration:
            hours = duration // 60
            minutes = duration % 60
            if minutes == 0:
                time_info += f" ({hours}—á)"
            else:
                time_info += f" ({hours}—á {minutes}–º)"
        return time_info

    @staticmethod
    async def format_games_list(games: list, users_info: dict[int, str] | None = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        if not games:
            return "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä"

        text = ""
        for game in games:
            date_str = GameFormatter.format_date(game.date)
            players_count = len(game.get_players())
            free_slots = game.free_slots()
            status_emoji = "üîç" if free_slots > 0 else "‚úÖ"

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ
            text += f"{status_emoji} <b>{date_str}</b>  "

            # –í—Ä–µ–º—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if game.time:
                time_info = GameFormatter.format_time_duration(game.time, game.duration)
                text += f"{time_info}\n"

            # –õ–æ–∫–∞—Ü–∏—è –∏ –∫–æ—Ä—Ç
            if game.location:
                text += f"üìç {game.location}\n"
            text += f"üéæ –ö–æ—Ä—Ç ‚Ññ{game.court if game.court else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"

            # –£—á–∞—Å—Ç–Ω–∏–∫–∏
            if players_count > 0:
                if users_info:
                    player_names = [
                        users_info.get(player_id, f"User{player_id}")
                        for player_id in game.get_players()
                    ]
                    text += f"üë• –ó–∞–ø–∏—Å–∞–Ω—ã: {', '.join(player_names)}\n"
                else:
                    text += f"üë• –ó–∞–ø–∏—Å–∞–Ω—ã: {players_count} –∏–≥—Ä–æ–∫(–æ–≤)\n"

            text += "\n"

        return text


class KeyboardBuilder:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""

    @staticmethod
    def create_main_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üü¢ –í—Å–µ –∏–≥—Ä—ã", callback_data="show_available_games_0")],
            [InlineKeyboardButton(text="üë§ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="show_my_games_0")],
            [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="register_menu_0")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å—Å—è", callback_data="unregister_menu_0")],
            [InlineKeyboardButton(text="üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏", callback_data="game_management")],
        ])

    @staticmethod
    def create_navigation_buttons(action: str, page: int, total_pages: int) -> list[InlineKeyboardButton]:
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
        nav_buttons = []

        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{action}_{page - 1}"))

        if total_pages > 1:
            nav_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="current_page"))

        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{action}_{page + 1}"))

        return nav_buttons

    @staticmethod
    def create_games_list_keyboard(
            action: str,
            page: int,
            total_pages: int,
            additional_buttons: list[list[InlineKeyboardButton]] | None = None,
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä."""
        keyboard = []

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = KeyboardBuilder.create_navigation_buttons(action, page, total_pages)
        if nav_buttons:
            keyboard.append(nav_buttons)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if additional_buttons:
            keyboard.extend(additional_buttons)

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    async def create_date_selection_keyboard(
            db: Database,
            action: str,
            user_id: int | None = None,
            page: int = 0,
            config: BotConfig | None = None,
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
        if not config:
            config = BotConfig()

        offset = page * config.games_per_page

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
        if action == "register":
            games = await db.get_available_games(
                limit=config.games_per_page,
                offset=offset,
                exclude_user_id=user_id,
            )
            total_count = (
                await db.count_available_games_excluding_user(user_id)
                if user_id else await db.count_available_games()
            )
        elif action == "unregister" and user_id:
            games = await db.get_user_games(user_id, limit=config.games_per_page, offset=offset)
            total_count = await db.count_user_games(user_id)
        else:
            return InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
            ])

        keyboard = []

        # –ö–Ω–æ–ø–∫–∏ —Å –∏–≥—Ä–∞–º–∏
        for game in games:
            button_text = GameFormatter.format_short_date(game.date)

            if game.time:
                button_text += f" –≤ {game.time}"
            else:
                button_text += " (–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ)"

            if action == "register":
                free_slots = game.free_slots()
                button_text += f" (—Å–≤–æ–±–æ–¥–Ω–æ: {free_slots})"
                callback_data = f"register_{game.date.strftime('%Y-%m-%d')}"
            else:  # unregister
                callback_data = f"unregister_{game.date.strftime('%Y-%m-%d')}"

            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        total_pages = (total_count + config.games_per_page - 1) // config.games_per_page
        nav_buttons = KeyboardBuilder.create_navigation_buttons(f"{action}_menu", page, total_pages)
        if nav_buttons:
            keyboard.append(nav_buttons)

        keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

        return InlineKeyboardMarkup(inline_keyboard=keyboard)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

    @staticmethod
    async def send_to_all_users(
            bot: Bot,
            db: Database,
            message: str,
            exclude_user_id: int | None = None,
    ) -> dict[str, int]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        stats = {"sent": 0, "failed": 0}

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="delete_message")],
        ])

        try:
            all_users = await db.get_all_users()
            for user_id in all_users:
                if exclude_user_id and user_id == exclude_user_id:
                    continue
                try:
                    await bot.send_message(
                        user_id,
                        message,
                        parse_mode="HTML",
                        reply_markup=keyboard,
                    )
                    stats["sent"] += 1
                except Exception as e:  # noqa: BLE001
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    stats["failed"] += 1
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {stats['sent']} —É—Å–ø–µ—à–Ω–æ, {stats['failed']} –Ω–µ—É–¥–∞—á–Ω–æ")
        except Exception as e:  # noqa: BLE001
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return stats


class GameService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–∞–º–∏."""

    def __init__(self, db: Database, bot: Bot, reminder_system=None, config: BotConfig | None = None) -> None:  # noqa: D107, ANN001
        self.db = db
        self.bot = bot
        self.reminder_system = reminder_system
        self.config = config or BotConfig()

    async def get_users_for_games(self, games: list) -> dict[int, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä."""
        all_player_ids = set()
        for game in games:
            all_player_ids.update(game.get_players())

        return await self.db.get_users_info(list(all_player_ids)) if all_player_ids else {}

    async def register_player(self, game_date: datetime, user: User) -> dict:
        """–ó–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∏–≥—Ä—É."""
        result = {"success": False, "message": "", "alert": True}

        # –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É
        game = await self.db.get_game_by_date(game_date)
        if not game:
            result["message"] = "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            return result

        if game.has_player(user.id):
            result["message"] = "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É"
            return result

        if game.is_full():
            result["message"] = "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç"
            return result

        # –ó–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞
        success = await self.db.register_player(game_date, user.id)
        if success:
            date_formatted = GameFormatter.format_date(game_date)
            user_name = UserFormatter.get_display_name(user)

            result["success"] = True
            result["message"] = f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {date_formatted}"

            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ reminder_system
            updated_game = await self.db.get_game_by_date(game_date)
            if updated_game and updated_game.time and self.reminder_system:
                try:
                    await self.reminder_system.schedule_reminder(game_date.date(), updated_game.time)
                    logger.debug(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∏–≥—Ä—ã {date_formatted}")
                except Exception as e:  # noqa: BLE001
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if self.config.notification_enabled:
                notification_message = (
                    f"üéæ <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É!</b>\n\n"
                    f"{user_name} –∑–∞–ø–∏—Å–∞–ª—Å—è/-–ª–∞—Å—å –Ω–∞ <b>{date_formatted}</b>"
                )
                await NotificationService.send_to_all_users(
                    self.bot, self.db, notification_message, exclude_user_id=user.id,
                )
        else:
            result["message"] = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏"

        return result

    async def unregister_player(self, game_date: datetime, user: User) -> dict:
        """–û—Ç–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –æ—Ç –∏–≥—Ä—ã."""
        result = {"success": False, "message": "", "alert": True}

        # –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É
        game = await self.db.get_game_by_date(game_date)
        if not game:
            result["message"] = "‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            return result

        if not game.has_player(user.id):
            result["message"] = "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É"
            return result

        # –û—Ç–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞
        success = await self.db.unregister_player(game_date, user.id)
        if success:
            date_formatted = GameFormatter.format_date(game_date)
            user_name = UserFormatter.get_display_name(user)

            result["success"] = True
            result["message"] = f"‚úÖ –í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ {date_formatted}"

            # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ reminder_system
            updated_game = await self.db.get_game_by_date(game_date)
            if updated_game and updated_game.time and len(updated_game.get_players()) > 0 and self.reminder_system:
                try:
                    await self.reminder_system.schedule_reminder(game_date.date(), updated_game.time)
                    logger.debug(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∏–≥—Ä—ã {date_formatted}")
                except Exception as e:  # noqa: BLE001
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if self.config.notification_enabled:
                notification_message = (
                    f"‚ö†Ô∏è <b>–ò–≥—Ä–æ–∫ —É–¥–∞–ª–∏–ª—Å—è</b>\n\n"
                    f"{user_name} —É–¥–∞–ª–∏–ª—Å—è/-–ª–∞—Å—å –∏–∑ –∏–≥—Ä—ã <b>{date_formatted}</b>\n\n"
                    f"üîì –û—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ!"
                )
                await NotificationService.send_to_all_users(
                    self.bot, self.db, notification_message, exclude_user_id=user.id,
                )
        else:
            result["message"] = "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"

        return result


class GameListHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–æ–≤ –∏–≥—Ä."""

    def __init__(self, game_service: GameService, config: BotConfig | None = None) -> None:  # noqa: D107
        self.game_service = game_service
        self.config = config or BotConfig()

    async def show_available_games(
            self,
            message_or_callback: Message | CallbackQuery,
            page: int = 0,
            edit: bool = True,  # noqa: FBT001, FBT002
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–≥—Ä—ã."""
        offset = page * self.config.games_per_page

        games = await self.game_service.db.get_upcoming_games(
            limit=self.config.games_per_page,
            offset=offset,
        )
        total_count = await self.game_service.db.count_upcoming_games()
        total_pages = (total_count + self.config.games_per_page - 1) // self.config.games_per_page

        if not games:
            text = "üö´ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä"
        else:
            users_info = await self.game_service.get_users_for_games(games)
            text = "üü¢ <b>–í—Å–µ –∏–≥—Ä—ã</b>\n\n" + await GameFormatter.format_games_list(
                games, users_info,
            )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        additional_buttons = [
            [
                InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="register_menu_0"),
                InlineKeyboardButton(text="üë§ –ú–æ–∏ –∏–≥—Ä—ã", callback_data="show_my_games_0"),
            ],
        ]

        keyboard = KeyboardBuilder.create_games_list_keyboard(
            "show_available_games", page, total_pages, additional_buttons,
        )

        await self._send_or_edit_message(message_or_callback, text, keyboard, edit)

    async def show_my_games(
            self,
            message_or_callback: Message | CallbackQuery,
            user_id: int,
            page: int = 0,
            edit: bool = True,  # noqa: FBT001, FBT002
    ) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        offset = page * self.config.games_per_page

        games = await self.game_service.db.get_user_games(
            user_id,
            limit=self.config.games_per_page,
            offset=offset,
        )
        total_count = await self.game_service.db.count_user_games(user_id)
        total_pages = (total_count + self.config.games_per_page - 1) // self.config.games_per_page

        if not games:
            text = "üë§ <b>–ú–æ–∏ –∏–≥—Ä—ã</b>\n\nüö´ –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∏–≥—Ä—É"
        else:
            users_info = await self.game_service.get_users_for_games(games)
            text = "üë§ <b>–ú–æ–∏ –∏–≥—Ä—ã</b>\n\n" + await GameFormatter.format_games_list(
                games, users_info,
            )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        additional_buttons = [
            [
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å—Å—è", callback_data="unregister_menu_0"),
                InlineKeyboardButton(text="üü¢ –í—Å–µ –∏–≥—Ä—ã", callback_data="show_available_games_0"),
            ],
        ]

        keyboard = KeyboardBuilder.create_games_list_keyboard(
            "show_my_games", page, total_pages, additional_buttons,
        )

        await self._send_or_edit_message(message_or_callback, text, keyboard, edit)

    @staticmethod
    async def _send_or_edit_message(
            message_or_callback: Message | CallbackQuery,
            text: str,
            keyboard: InlineKeyboardMarkup,
            edit: bool,  # noqa: FBT001
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        if edit and hasattr(message_or_callback, "message"):
            await message_or_callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message_or_callback.answer(text, reply_markup=keyboard, parse_mode="HTML")
