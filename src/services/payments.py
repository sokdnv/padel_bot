"""–ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ –¥–µ–Ω–µ–≥ –∑–∞ –∏–≥—Ä—ã."""

from datetime import datetime

from aiogram import Bot, F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)


class PaymentStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ."""

    waiting_for_cost = State()
    waiting_for_phone = State()
    waiting_for_bank = State()
    waiting_for_custom_bank = State()


router = Router()

BANKS = [
    "–°–±–µ—Ä–±–∞–Ω–∫", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ", "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", "–î—Ä—É–≥–æ–π –±–∞–Ω–∫",
]


def create_yes_no_keyboard(game_date: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–∞/–Ω–µ—Ç –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–±–æ—Ä–∞ –¥–µ–Ω–µ–≥."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∞", callback_data=f"payment_yes_{game_date}"),
                InlineKeyboardButton(text="–ù–µ—Ç", callback_data="delete_message"),
            ],
        ],
    )


def create_banks_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±–∞–Ω–∫–∞–º–∏."""
    keyboard = []
    for i in range(0, len(BANKS), 2):
        row = []
        for j in range(i, min(i + 2, len(BANKS))):
            bank = BANKS[j]
            callback_data = f"bank_{bank.lower().replace(' ', '_').replace('-', '_')}"
            row.append(InlineKeyboardButton(text=bank, callback_data=callback_data))
        keyboard.append(row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_phone_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


def create_payment_done_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–¥–µ–ª–∞–Ω–æ!", callback_data="payment_done")],
        ],
    )


async def send_payment_offer(bot: Bot, admin_id: int, game_date: str, game_time: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–±–æ—Ä–µ –¥–µ–Ω–µ–≥ –∞–¥–º–∏–Ω—É."""
    text = (
        f"üéæ <b>–ö–ª–∞—Å—Å–Ω–æ –ø–æ–∏–≥—Ä–∞–ª–∏!</b>\n\n"
        f"–ò–≥—Ä–∞ {game_date} –≤ {game_time} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ —Å–±–æ—Ä–µ –¥–µ–Ω–µ–≥ –∑–∞ –∏–≥—Ä—É?"
    )

    await bot.send_message(
        admin_id,
        text,
        parse_mode="HTML",
        reply_markup=create_yes_no_keyboard(game_date),
    )


@router.callback_query(F.data.startswith("payment_yes_"))
async def accept_payment(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ."""
    game_date = callback.data.replace("payment_yes_", "")
    await state.update_data(game_date=game_date)

    await callback.message.edit_text(
        "üí∞ <b>–°–±–æ—Ä –¥–µ–Ω–µ–≥ –∑–∞ –∏–≥—Ä—É</b>\n\n"
        "–ö–∞–∫–∞—è –±—ã–ª–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä—Ç–∞ –≤ —Ä—É–±–ª—è—Ö?\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ:",
        parse_mode="HTML",
    )
    await state.set_state(PaymentStates.waiting_for_cost)
    await callback.answer()


@router.message(StateFilter(PaymentStates.waiting_for_cost))
async def handle_cost(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏."""
    cost = int(message.text.strip())
    await state.update_data(cost=cost)

    await message.reply(
        "üì± <b>–ù–æ–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É:",
        parse_mode="HTML",
        reply_markup=create_phone_keyboard(),
    )
    await state.set_state(PaymentStates.waiting_for_phone)


@router.message(StateFilter(PaymentStates.waiting_for_phone), F.contact)
async def handle_contact(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    await _ask_for_bank(message)


@router.message(StateFilter(PaymentStates.waiting_for_phone), F.text)
async def handle_phone_text(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    phone = message.text.strip()
    await state.update_data(phone=phone)
    await _ask_for_bank(message)


async def _ask_for_bank(message: Message) -> None:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –±–∞–Ω–∫–∞."""
    await message.reply(
        "üè¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫</b>\n\n"
        "–ù–∞ –∫–∞–∫–æ–π –±–∞–Ω–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏?",
        parse_mode="HTML",
        reply_markup=create_banks_keyboard(),
    )


@router.callback_query(F.data.startswith("bank_"), StateFilter(PaymentStates.waiting_for_phone))
async def handle_bank_from_phone_state(callback: CallbackQuery, state: FSMContext, db) -> None:  # noqa: ANN001
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    await state.set_state(PaymentStates.waiting_for_bank)
    await handle_bank(callback, state, callback.bot, db)


@router.callback_query(F.data.startswith("bank_"), StateFilter(PaymentStates.waiting_for_bank))
async def handle_bank(callback: CallbackQuery, state: FSMContext, bot: Bot, db) -> None:  # noqa: ANN001
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞."""
    bank_code = callback.data.replace("bank_", "")

    if bank_code == "–¥—Ä—É–≥–æ–π_–±–∞–Ω–∫":
        await callback.message.edit_text(
            "üè¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞</b>\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:",
            parse_mode="HTML",
        )
        await state.set_state(PaymentStates.waiting_for_custom_bank)
        return

    bank_name = bank_code.replace("_", " ").title()
    await _finish_payment_setup(callback, state, bot, bank_name, db)


async def _finish_payment_setup(  # noqa: PLR0913
        callback,  # noqa: ANN001
        state: FSMContext,
        bot: Bot,
        bank_name: str,
        db,  # noqa: ANN001
        *,
        custom: bool = False,
) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    data = await state.get_data()
    cost = data["cost"]
    phone = data["phone"]
    game_date = data["game_date"]
    cost_per_person = cost // 4
    await state.clear()

    if phone.startswith("7"):
        phone = "+" + phone

    summary_text = (
        f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã!</b>\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä—Ç–∞: {cost} —Ä—É–±.\n"
        f"üì± –ù–æ–º–µ—Ä: {phone}\n"
        f"üè¶ –ë–∞–Ω–∫: {bank_name}\n"
        f"üí∏ –ö –¥–æ–ø–ª–∞—Ç–µ —Å —á–µ–ª–æ–≤–µ–∫–∞: {cost_per_person} —Ä—É–±.\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å—ã –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º!"
    )

    if custom:
        await callback.message.reply(summary_text, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    else:
        await callback.message.edit_text(summary_text, parse_mode="HTML")

    await _send_payment_requests(
        bot=bot,
        database=db,
        admin_id=callback.from_user.id,
        game_date=game_date,
        cost_per_person=cost_per_person,
        phone=phone,
        bank_name=bank_name,
    )

    await callback.answer("–ó–∞–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")


async def _send_payment_requests(  # noqa: PLR0913
        bot: Bot,
        database,  # noqa: ANN001
        admin_id: int,
        game_date: str,
        cost_per_person: int,
        phone: str,
        bank_name: str,
) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–≥—Ä–æ–∫–∞–º."""
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –Ω–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game_datetime = datetime.strptime(game_date, "%d.%m.%Y")  # noqa: DTZ007
    game = await database.get_game_by_date(game_datetime)

    players = game.get_players()
    players_to_notify = [pid for pid in players if pid != admin_id]

    message_text = (
        f"üí∞ <b>–ü—Ä–æ—Å—å–±–∞ –æ–± –æ–ø–ª–∞—Ç–µ –∏–≥—Ä—ã</b>\n\n"
        f"–ö –æ–ø–ª–∞—Ç–µ: <b>{cost_per_person} —Ä—É–±.</b>\n"
        f"üì± –ù–æ–º–µ—Ä: <code>{phone}</code>\n"
        f"üè¶ –ë–∞–Ω–∫: {bank_name}\n\n"
    )

    for player_id in players_to_notify:
        await bot.send_message(
            player_id,
            message_text,
            parse_mode="HTML",
            reply_markup=create_payment_done_keyboard(),
        )


@router.callback_query(F.data == "payment_done")
async def payment_confirmed(callback: CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∏–≥—Ä–æ–∫–æ–º."""
    await callback.message.delete()
    await callback.answer("‚úÖ –°–ø–∞—Å–∏–±–æ!")


@router.message(StateFilter(PaymentStates.waiting_for_custom_bank))
async def handle_custom_bank(message: Message, state: FSMContext, bot: Bot, db) -> None:  # noqa: ANN001
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞."""
    bank_name = message.text.strip()

    class FakeCallback:
        def __init__(self, msg) -> None:  # noqa: ANN001
            self.message = msg
            self.from_user = msg.from_user

        async def answer(self, text="") -> None:  # noqa: ANN001
            pass

    await _finish_payment_setup(FakeCallback(message), state, bot, bank_name, db, custom=True)
