"""–°–∫—Ä–∏–ø—Ç —Å —Ç–µ–ª–µ–≥—Ä–∞–º–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏."""

from datetime import datetime

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from src.database.db import Database
from src.services.core import BotConfig, GameListHandler, GameService, KeyboardBuilder

router = Router()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
game_service: GameService | None = None
game_list_handler: GameListHandler | None = None


def init_handlers(db: Database, bot: Bot, reminder_system=None, config: BotConfig | None = None) -> None:  # noqa: ANN001
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    global game_service, game_list_handler  # noqa: PLW0603
    game_service = GameService(db, bot, reminder_system, config)
    game_list_handler = GameListHandler(game_service, config)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("start"))
async def start_command(message: Message, db: Database) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await db.save_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name,
    )

    text = "üéæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–∞–¥–µ–ª!</b>\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    await message.answer(text, reply_markup=KeyboardBuilder.create_main_keyboard(), parse_mode="HTML")


@router.message(Command("games"))
async def games_command(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /games."""
    await game_list_handler.show_available_games(message, page=0, edit=False)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
@router.callback_query(F.data.startswith("show_available_games_"))
async def show_available_games_callback(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–≥—Ä—ã."""
    page = int(callback.data.split("_")[-1])
    await game_list_handler.show_available_games(callback, page=page, edit=True)
    await callback.answer()


@router.callback_query(F.data.startswith("show_my_games_"))
async def show_my_games_callback(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∏–≥—Ä—ã."""
    page = int(callback.data.split("_")[-1])
    await game_list_handler.show_my_games(callback, callback.from_user.id, page=page, edit=True)
    await callback.answer()


@router.callback_query(F.data.startswith("register_menu_"))
async def register_menu_callback(callback: CallbackQuery, db: Database) -> None:
    """–ú–µ–Ω—é –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É."""
    page = int(callback.data.split("_")[-1])
    keyboard = await KeyboardBuilder.create_date_selection_keyboard(
        db, "register", user_id=callback.from_user.id, page=page,
    )
    text = "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>\n\n"

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("unregister_menu_"))
async def unregister_menu_callback(callback: CallbackQuery, db: Database) -> None:
    """–ú–µ–Ω—é –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∏–≥—Ä—ã."""
    page = int(callback.data.split("_")[-1])
    keyboard = await KeyboardBuilder.create_date_selection_keyboard(
        db, "unregister", user_id=callback.from_user.id, page=page,
    )
    text = "‚ùå <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:</b>\n\n"

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("register_"))
async def register_player_callback(callback: CallbackQuery) -> None:
    """–ó–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∏–≥—Ä—É."""
    if callback.data.startswith("register_menu_"):
        return  # –≠—Ç–æ –≤—ã–∑–æ–≤ –º–µ–Ω—é, –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

    date_str = callback.data.split("_")[1]
    date = datetime.strptime(date_str, "%Y-%m-%d")  # noqa: DTZ007

    result = await game_service.register_player(date, callback.from_user)
    await callback.answer(result["message"], show_alert=result["alert"])

    if result["success"]:
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        text = "üéæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–∞–¥–µ–ª!</b>\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        await callback.message.edit_text(
            text,
            reply_markup=KeyboardBuilder.create_main_keyboard(),
            parse_mode="HTML",
        )


@router.callback_query(F.data.startswith("unregister_"))
async def unregister_player_callback(callback: CallbackQuery) -> None:
    """–û—Ç–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –æ—Ç –∏–≥—Ä—ã."""
    if callback.data.startswith("unregister_menu_"):
        return  # –≠—Ç–æ –≤—ã–∑–æ–≤ –º–µ–Ω—é, –Ω–µ –æ—Ç–ø–∏—Å–∫–∞

    date_str = callback.data.split("_")[1]
    date = datetime.strptime(date_str, "%Y-%m-%d")  # noqa: DTZ007

    result = await game_service.unregister_player(date, callback.from_user)
    await callback.answer(result["message"], show_alert=result["alert"])

    if result["success"]:
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        text = "üéæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–∞–¥–µ–ª!</b>\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        await callback.message.edit_text(
            text,
            reply_markup=KeyboardBuilder.create_main_keyboard(),
            parse_mode="HTML",
        )


@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    text = "üéæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–∞–¥–µ–ª!</b>\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    await callback.message.edit_text(
        text,
        reply_markup=KeyboardBuilder.create_main_keyboard(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data == "current_page")
async def current_page_callback(callback: CallbackQuery) -> None:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    await callback.answer()


@router.callback_query(F.data == "delete_message")
async def delete_message_handler(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        await callback.message.delete()
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", show_alert=False)
    except Exception:  # noqa: S110
        pass
