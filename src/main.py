"""–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""

import asyncio
import logging
from collections.abc import Awaitable, Callable
from typing import Any

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery, Message, TelegramObject

from src.config import Config, logger
from src.database.db import Database
from src.handlers import init_handlers

# –ò–º–ø–æ—Ä—Ç—ã —Ä–æ—É—Ç–µ—Ä–æ–≤
from src.handlers import router as handlers_router
from src.services.core import BotConfig
from src.shared.decorators import log_handler_calls
from src.services.game_creation import GameCreationConfig, init_game_management
from src.services.game_creation import router as game_creation_router
from src.services.payments import router as payments_router

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
from src.services.scheduler import ReminderConfig, create_reminder_system


class DatabaseMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –±–æ—Ç–∞ –≤ handlers."""

    def __init__(self, db: Database, bot: Bot) -> None:  # noqa: D107
        self.db = db
        self.bot = bot
        super().__init__()

    @log_handler_calls
    async def __call__(  # noqa: D102
        self,
        handler: Callable[[TelegramObject, dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: dict[str, Any],
    ) -> Any:  # noqa: ANN401
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
        if isinstance(event, Message):
            user_id = event.from_user.id
            username = event.from_user.username or "–±–µ–∑ username"
            text = event.text or "[–Ω–µ —Ç–µ–∫—Å—Ç]"
            logger.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} (@{username}): {text[:50]}...")
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
            username = event.from_user.username or "–±–µ–∑ username"
            callback_data = event.data or "[–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö]"
            logger.info(f"üîò Callback –æ—Ç {user_id} (@{username}): {callback_data}")

        data["db"] = self.db
        data["bot"] = self.bot

        try:
            result = await handler(event, data)
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if isinstance(event, Message):
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            elif isinstance(event, CallbackQuery):
                logger.info(f"‚úÖ Callback –æ—Ç {user_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return result  # noqa: TRY300
        except Exception as e:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
            if isinstance(event, Message):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {e}")
            elif isinstance(event, CallbackQuery):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –æ—Ç {user_id}: {e}")
            raise


def setup_logging() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ –∏ aiogram."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ aiogram
    aiogram_logger = logging.getLogger("aiogram")
    aiogram_logger.setLevel(logging.INFO)

    # –õ–æ–≥–≥–µ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dispatcher_logger = logging.getLogger("aiogram.dispatcher")
    dispatcher_logger.setLevel(logging.INFO)

    # –õ–æ–≥–≥–µ—Ä –¥–ª—è webhook (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    webhook_logger = logging.getLogger("aiogram.webhook")
    webhook_logger.setLevel(logging.INFO)

    logger.info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")


async def setup_services(bot: Bot, db: Database) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminder_config = ReminderConfig(
        reminder_hours_before=3,
        max_upcoming_games=100,
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminder_system = create_reminder_system(bot, db, reminder_config)
    logger.info("–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    bot_config = BotConfig(
        games_per_page=4,
        notification_enabled=True,
    )

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä
    game_creation_config = GameCreationConfig(
        min_duration=60,
        max_duration=180,
        games_per_page=4,
        auto_register_creator=True,
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    init_handlers(db, bot, reminder_system, bot_config)
    logger.info("–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏
    init_game_management(db, bot, reminder_system, game_creation_config)
    logger.info("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")


async def setup_dispatcher(dp: Dispatcher, db: Database, bot: Bot) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ middleware –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –±–æ—Ç–∞
    middleware = DatabaseMiddleware(db, bot)
    dp.message.middleware(middleware)
    dp.callback_query.middleware(middleware)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(handlers_router)
    dp.include_router(payments_router)
    dp.include_router(game_creation_router)

    logger.info("–î–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        config = Config.from_env()
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except ValueError:
        logger.exception("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(
        token=config.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    try:
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{bot_info.username} ({bot_info.first_name})")
    except Exception as e:  # noqa: BLE001
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp = Dispatcher()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = Database(config.database_url)

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.connect()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        await setup_services(bot, db)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        await setup_dispatcher(dp, db, bot)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        logger.info("üì° –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è polling...")
        await dp.start_polling(bot)

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception:  # noqa: BLE001
        logger.exception("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db.disconnect()
        logger.info("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞")

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        await bot.session.close()
        logger.info("ü§ñ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception:  # noqa: BLE001
        logger.exception("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    finally:
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
