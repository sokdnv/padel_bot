"""–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–µ—Ä—ã –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

from datetime import date, datetime, time
from typing import Any

from aiogram.types import User


class Formatters:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Ñ–æ—Ä–º–∞—Ç–µ—Ä–æ–≤."""

    @staticmethod
    def format_date(date_value: datetime | date) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É."""
        if isinstance(date_value, datetime):
            return date_value.strftime("%d.%m.%Y")
        return date_value.strftime("%d.%m.%Y")

    @staticmethod
    def format_short_date(date_value: datetime | date) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –¥–∞—Ç—É."""
        if isinstance(date_value, datetime):
            return date_value.strftime("%d.%m")
        return date_value.strftime("%d.%m")

    @staticmethod
    def format_time(time_value: str | time | None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        if not time_value:
            return "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        if isinstance(time_value, str):
            return time_value[:5] if len(time_value) >= 5 else time_value

        return time_value.strftime("%H:%M")

    @staticmethod
    def format_time_duration(time_str: str, duration: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å."""
        time_info = time_str
        if duration:
            hours = duration // 60
            minutes = duration % 60
            if minutes == 0:
                time_info += f" ({hours}—á)"
            else:
                time_info += f" ({hours}—á {minutes}–º)"
        return time_info

    @staticmethod
    def format_duration(duration: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å."""
        hours = duration // 60
        minutes = duration % 60
        if minutes == 0:
            return f"{hours}—á"
        return f"{hours}—á {minutes}–º"

    @staticmethod
    def get_display_name(user: User) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if user.username:
            return f"@{user.username}"
        if user.first_name:
            return user.first_name
        return f"User{user.id}"

    @staticmethod
    def parse_time(time_value: str | time) -> time | None:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤."""
        if not time_value:
            return None

        if isinstance(time_value, str):
            try:
                return datetime.strptime(time_value, "%H:%M:%S").time()
            except ValueError:
                try:
                    return datetime.strptime(time_value, "%H:%M").time()
                except ValueError:
                    return None

        return time_value if isinstance(time_value, time) else None

    @staticmethod
    async def format_games_list(games: list, users_info: dict[int, str] | None = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        if not games:
            return "üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä"

        text = ""
        for game in games:
            date_str = Formatters.format_date(game.date)
            players_count = len(game.get_players())
            free_slots = game.free_slots()
            status_emoji = "üîç" if free_slots > 0 else "‚úÖ"

            text += f"{status_emoji} <b>{date_str}</b>  "

            if game.time:
                time_info = Formatters.format_time_duration(game.time, game.duration)
                text += f"{time_info}\n"

            if game.location:
                text += f"üìç {game.location}\n"
            text += f"üéæ –ö–æ—Ä—Ç ‚Ññ{game.court or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"

            if players_count > 0:
                if users_info:
                    player_names = [users_info.get(player_id, f"User{player_id}") for player_id in game.get_players()]
                    text += f"üë• –ó–∞–ø–∏—Å–∞–Ω—ã: {', '.join(player_names)}\n"
                else:
                    text += f"üë• –ó–∞–ø–∏—Å–∞–Ω—ã: {players_count} –∏–≥—Ä–æ–∫(–æ–≤)\n"

            text += "\n"

        return text

    @staticmethod
    def format_reminder_message(
        game_time: str | time,
        location: str | None,
        court: int | None,
        player_names: list[str],
        hours_before: int = 3,
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
        time_str = Formatters.format_time(game_time)
        location_str = location or "–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        court_str = f"–ö–æ—Ä—Ç ‚Ññ{court}" if court else "–Ω–æ–º–µ—Ä –∫–æ—Ä—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω"

        return (
            f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏–≥—Ä–µ!</b>\n\n"
            f"üéæ –ò–≥—Ä–∞ —á–µ—Ä–µ–∑ {hours_before} —á–∞—Å–∞\n"
            f"üïê {time_str}\n"
            f"üìç {location_str}\n"
            f"üèüÔ∏è {court_str}\n\n"
            f"üë• {', '.join(player_names)}\n\n"
            f"–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫–æ—Ä—Ç–µ! üéæ"
        )

    @staticmethod
    def format_game_success_message(game_data: dict[str, Any]) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã."""
        date_str = Formatters.format_date(game_data["date"])
        time_str = game_data["time"].strftime("%H:%M")
        duration_str = Formatters.format_duration(game_data["duration"])

        return (
            f"‚úÖ <b>–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
            f"üïê –í—Ä–µ–º—è: {time_str}\n"
            f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {game_data['location']}\n"
            f"üéæ –ö–æ—Ä—Ç: ‚Ññ{game_data['court']}\n\n"
        )

    @staticmethod
    def format_game_notification_message(game_data: dict[str, Any], creator: User) -> str:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∏–≥—Ä–µ."""
        date_str = Formatters.format_date(game_data["date"])
        time_str = game_data["time"].strftime("%H:%M")
        creator_name = Formatters.get_display_name(creator)
        duration_str = Formatters.format_duration(game_data["duration"])

        return (
            f"üÜï <b>–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator_name}\n"
            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
            f"üïê –í—Ä–µ–º—è: {time_str}\n"
            f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {game_data['location']}\n"
            f"üéæ –ö–æ—Ä—Ç: ‚Ññ{game_data['court']}\n\n"
        )
