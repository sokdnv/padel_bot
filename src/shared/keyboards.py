"""–û–±—â–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã."""

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from src.database.db import Database


class CommonKeyboards:
    """–û–±—â–∏–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""

    @staticmethod
    def create_main_keyboard() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üü¢ –í—Å–µ –∏–≥—Ä—ã", callback_data="show_available_games_0")],
                [InlineKeyboardButton(text="üë§ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="show_my_games_0")],
                [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="register_menu_0")],
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å—Å—è", callback_data="unregister_menu_0")],
                [InlineKeyboardButton(text="üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏", callback_data="game_management")],
            ]
        )

    @staticmethod
    def create_back_to_main_button() -> list[InlineKeyboardButton]:
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        return [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]

    @staticmethod
    def create_cancel_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã."""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")],
            ]
        )

    @staticmethod
    def create_delete_keyboard() -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="delete_message")],
            ]
        )


class PaginationHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""

    @staticmethod
    def create_navigation_buttons(action: str, page: int, total_pages: int) -> list[InlineKeyboardButton]:
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
        nav_buttons = []

        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{action}_{page - 1}"))

        if total_pages > 1:
            nav_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="current_page"))

        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{action}_{page + 1}"))

        return nav_buttons

    @staticmethod
    def create_paginated_keyboard(
        action: str,
        page: int,
        total_pages: int,
        additional_buttons: list[list[InlineKeyboardButton]] | None = None,
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
        keyboard = []

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = PaginationHelper.create_navigation_buttons(action, page, total_pages)
        if nav_buttons:
            keyboard.append(nav_buttons)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if additional_buttons:
            keyboard.extend(additional_buttons)

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append(CommonKeyboards.create_back_to_main_button())

        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    @staticmethod
    async def create_date_selection_keyboard(
        db: Database,
        action: str,
        user_id: int | None = None,
        page: int = 0,
        games_per_page: int = 4,
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
        offset = page * games_per_page

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
        if action == "register":
            games = await db.get_available_games(
                limit=games_per_page,
                offset=offset,
                exclude_user_id=user_id,
            )
            total_count = (
                await db.count_available_games_excluding_user(user_id) if user_id else await db.count_available_games()
            )
        elif action == "unregister" and user_id:
            games = await db.get_user_games(user_id, limit=games_per_page, offset=offset)
            total_count = await db.count_user_games(user_id)
        else:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    CommonKeyboards.create_back_to_main_button(),
                ]
            )

        keyboard = []

        # –ö–Ω–æ–ø–∫–∏ —Å –∏–≥—Ä–∞–º–∏
        from src.shared.formatters import Formatters  # –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞

        for game in games:
            button_text = Formatters.format_short_date(game.date)

            if game.time:
                button_text += f" –≤ {game.time}"
            else:
                button_text += " (–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ)"

            if action == "register":
                free_slots = game.free_slots()
                button_text += f" (—Å–≤–æ–±–æ–¥–Ω–æ: {free_slots})"
                callback_data = f"register_{game.date.strftime('%Y-%m-%d')}"
            else:  # unregister
                callback_data = f"unregister_{game.date.strftime('%Y-%m-%d')}"

            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        total_pages = (total_count + games_per_page - 1) // games_per_page
        nav_buttons = PaginationHelper.create_navigation_buttons(f"{action}_menu", page, total_pages)
        if nav_buttons:
            keyboard.append(nav_buttons)

        keyboard.append(CommonKeyboards.create_back_to_main_button())

        return InlineKeyboardMarkup(inline_keyboard=keyboard)
