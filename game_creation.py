import logging
from datetime import datetime, time

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from database import Database
from handlers import get_user_display_name, send_notification_to_all_users

logger = logging.getLogger(__name__)
router = Router()


class GameCreation(StatesGroup):
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_duration = State()
    waiting_for_location = State()
    waiting_for_court = State()


def create_game_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", callback_data="create_game")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã", callback_data="my_created_games_0")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
        ]
    )
    return keyboard


async def create_my_games_keyboard(db: Database, user_id: int, page: int = 0) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–≥—Ä–∞–º–∏"""
    GAMES_PER_PAGE = 4
    offset = page * GAMES_PER_PAGE

    games = await db.get_created_games(user_id, limit=GAMES_PER_PAGE, offset=offset)
    total_count = await db.count_created_games(user_id)
    total_pages = (total_count + GAMES_PER_PAGE - 1) // GAMES_PER_PAGE

    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–≥—Ä–∞–º–∏
    for game in games:
        date_str = game.date.strftime("%d.%m")
        time_str = f" –≤ {game.time}" if game.time else ""
        button_text = f"üóë {date_str}{time_str}"
        callback_data = f"delete_game_{game.date.strftime('%Y-%m-%d')}"
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"my_created_games_{page - 1}"))

    if total_pages > 1:
        nav_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="current_page"))

    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"my_created_games_{page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data == "game_management")
async def game_management_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏"""
    text = "üéÆ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await callback.message.edit_text(text, reply_markup=create_game_management_keyboard(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "create_game")
async def start_game_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã"""
    text = (
        "üìÖ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–≥—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 –∏–ª–∏ 25.12"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(GameCreation.waiting_for_date)
    await callback.answer()


@router.message(GameCreation.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    try:
        date_text = message.text.strip()

        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
        if len(date_text.split('.')) == 2:  # –§–æ—Ä–º–∞—Ç –î–î.–ú–ú
            day, month = date_text.split('.')
            year = datetime.now().year
            if int(month) < datetime.now().month:
                year += 1
            date_str = f"{day}.{month}.{year}"
        else:  # –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
            date_str = date_text

        game_date = datetime.strptime(date_str, "%d.%m.%Y")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if game_date.date() < datetime.now().date():
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(date=game_date)

        text = (
            "üïê <b>–í—Ä–µ–º—è –∏–≥—Ä—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 19:30"
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]]
        )

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(GameCreation.waiting_for_time)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –î–î.–ú–ú")


@router.message(GameCreation.waiting_for_time)
async def process_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        time_str = message.text.strip()
        game_time = datetime.strptime(time_str, "%H:%M").time()

        await state.update_data(time=game_time)

        text = (
            "‚è± <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 60 –¥–æ 180):"
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]]
        )

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(GameCreation.waiting_for_duration)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19:30)")


@router.message(GameCreation.waiting_for_duration)
async def process_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        duration = int(message.text.strip())

        if duration < 60 or duration > 180:
            await message.answer("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 60 –¥–æ 180 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(duration=duration)

        text = (
            "üìç <b>–õ–æ–∫–∞—Ü–∏—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã:"
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]]
        )

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(GameCreation.waiting_for_location)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 60 –¥–æ 180")


@router.callback_query(F.data.startswith("duration_"))
async def process_duration(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    duration = int(callback.data.split("_")[1])
    await state.update_data(duration=duration)

    text = (
        "üìç <b>–õ–æ–∫–∞—Ü–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã:"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]]
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(GameCreation.waiting_for_location)
    await callback.answer()


@router.message(GameCreation.waiting_for_location)
async def process_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    location = message.text.strip()
    await state.update_data(location=location)

    text = (
        "üéæ <b>–ù–æ–º–µ—Ä –∫–æ—Ä—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—Ä—Ç–∞"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]]
    )

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(GameCreation.waiting_for_court)


@router.message(GameCreation.waiting_for_court)
async def process_court(message: Message, state: FSMContext, db: Database, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–æ—Ä—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã"""
    try:
        court = int(message.text.strip())
        data = await state.get_data()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
        success = await db.create_game(
            date=data['date'],
            time=data['time'],
            duration=data['duration'],
            location=data['location'],
            court=court,
            admin=message.from_user.id
        )

        if success:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è –Ω–∞ –∏–≥—Ä—É
            await db.register_player(data['date'], message.from_user.id)

            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            from scheduler import schedule_reminder
            await schedule_reminder(data['date'].date(), data['time'])

            date_str = data['date'].strftime("%d.%m.%Y")
            time_str = data['time'].strftime("%H:%M")
            duration_hours = data['duration'] // 60
            duration_minutes = data['duration'] % 60
            duration_str = f"{duration_hours}—á" + (f" {duration_minutes}–º" if duration_minutes else "")

            creator_name = get_user_display_name(message.from_user)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
            success_text = (
                f"‚úÖ <b>–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                f"üïê –í—Ä–µ–º—è: {time_str}\n"
                f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n"
                f"üìç –õ–æ–∫–∞—Ü–∏—è: {data['location']}\n"
                f"üéæ –ö–æ—Ä—Ç: ‚Ññ{court}\n\n"
            )

            from handlers import create_main_keyboard
            await message.answer(success_text, reply_markup=create_main_keyboard(), parse_mode="HTML")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            notification_text = (
                f"üÜï <b>–ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator_name}\n"
                f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                f"üïê –í—Ä–µ–º—è: {time_str}\n"
                f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n"
                f"üìç –õ–æ–∫–∞—Ü–∏—è: {data['location']}\n"
                f"üéæ –ö–æ—Ä—Ç: ‚Ññ{court}\n\n"
            )

            await send_notification_to_all_users(bot, db, notification_text, exclude_user_id=message.from_user.id)

        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã. –í–æ–∑–º–æ–∂–Ω–æ, –∏–≥—Ä–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")


@router.callback_query(F.data.startswith("my_created_games_"))
async def show_my_created_games(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–≥—Ä—ã"""
    page = int(callback.data.split("_")[-1])

    games = await db.get_created_games(callback.from_user.id, limit=4, offset=page * 4)

    text = "üö´ –í—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∏–≥—Ä" if not games else "üóë <b>–ú–æ–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"

    keyboard = await create_my_games_keyboard(db, callback.from_user.id, page)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("delete_game_"))
async def delete_game(callback: CallbackQuery, db: Database, bot):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã"""
    date_str = callback.data.split("_")[2]
    date = datetime.strptime(date_str, "%Y-%m-%d")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã
    game = await db.get_game_by_date(date)
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    logger.info(f"–ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞: admin={game.admin}, user_id={callback.from_user.id}")

    if game.admin != callback.from_user.id:
        await callback.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∏–≥—Ä—ã", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    players = game.get_players()

    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
    success = await db.delete_game(date, callback.from_user.id)

    if success:
        date_formatted = date.strftime("%d.%m.%Y")
        creator_name = get_user_display_name(callback.from_user)

        await callback.answer(f"‚úÖ –ò–≥—Ä–∞ –Ω–∞ {date_formatted} —É–¥–∞–ª–µ–Ω–∞", show_alert=True)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        if players:
            notification_text = (
                f"‚ùå <b>–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
                f"–°–æ–∑–¥–∞—Ç–µ–ª—å {creator_name} –æ—Ç–º–µ–Ω–∏–ª –∏–≥—Ä—É –Ω–∞ <b>{date_formatted}</b>\n"
                f"–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!"
            )

            for player_id in players:
                if player_id != callback.from_user.id:
                    try:
                        await bot.send_message(player_id, notification_text, parse_mode="HTML")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–∞ {player_id}: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from handlers import create_main_keyboard
        text = "üéæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–∞–¥–µ–ª!</b>\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        await callback.message.edit_text(text, reply_markup=create_main_keyboard(), parse_mode="HTML")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã", show_alert=True)
